{
	"info": {
		"_postman_id": "bda84455-7151-4571-a30b-4a87764df7b8",
		"name": "Cat Facts API",
		"description": "This API provides endpoints to get random cat facts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3011212"
	},
	"item": [
		{
			"name": "breeds",
			"item": [
				{
					"name": "Returns a list of breeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    type: \"object\",\r",
									"    required: [\"current_page\", \"data\", \"first_page_url\", \"from\", \"last_page\", \"last_page_url\", \"links\", \"next_page_url\", \"path\", \"per_page\", \"prev_page_url\", \"to\", \"total\"],\r",
									"    properties: {\r",
									"        current_page: { type: \"integer\" },\r",
									"        data: {\r",
									"            type: \"array\",\r",
									"            items: {\r",
									"                type: \"object\",\r",
									"                required: [\"breed\", \"country\", \"origin\", \"coat\", \"pattern\"],\r",
									"                properties: {\r",
									"                    breed: { type: \"string\" },\r",
									"                    country: { type: \"string\" },\r",
									"                    origin: { type: \"string\" },\r",
									"                    coat: { type: \"string\" },\r",
									"                    pattern: { type: \"string\" },\r",
									"                },\r",
									"            },\r",
									"        },\r",
									"        first_page_url: { type: \"string\", format: \"uri\" },\r",
									"        from: { type: \"integer\" },\r",
									"        last_page: { type: \"integer\" },\r",
									"        last_page_url: { type: \"string\", format: \"uri\" },\r",
									"        links: {\r",
									"            type: \"array\",\r",
									"            items: {\r",
									"                type: \"object\",\r",
									"                required: [\"url\", \"label\", \"active\"],\r",
									"                properties: {\r",
									"                    url: { type: [\"string\", \"null\"], format: \"uri\" },\r",
									"                    label: { type: \"string\" },\r",
									"                    active: { type: \"boolean\" },\r",
									"                },\r",
									"            },\r",
									"        },\r",
									"        next_page_url: { type: [\"string\", \"null\"], format: \"uri\" },\r",
									"        path: { type: \"string\", format: \"uri\" },\r",
									"        per_page: { type: \"integer\" },\r",
									"        prev_page_url: { type: [\"string\", \"null\"], format: \"uri\" },\r",
									"        to: { type: \"integer\" },\r",
									"        total: { type: \"integer\" },\r",
									"    },\r",
									"};\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\",function(){\r",
									"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.test(\"Data array contains expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;\r",
									"    pm.expect(jsonData.data[0]).to.have.property(\"breed\");\r",
									"    pm.expect(jsonData.data[0]).to.have.property(\"country\");\r",
									"    pm.expect(jsonData.data[0]).to.have.property(\"origin\");\r",
									"    pm.expect(jsonData.data[0]).to.have.property(\"coat\");\r",
									"    pm.expect(jsonData.data[0]).to.have.property(\"pattern\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/breeds?limit=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"breeds"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "returns a list of breeds"
					},
					"response": []
				}
			],
			"description": "Folder for breeds"
		},
		{
			"name": "fact",
			"item": [
				{
					"name": "Returns a random cat fact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    type: \"object\",\r",
									"    required: [\"fact\", \"length\"],\r",
									"    properties: {\r",
									"        fact: { type: \"string\" },\r",
									"        length: { type: \"integer\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\",function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/fact?max_length={{max_length}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"fact"
							],
							"query": [
								{
									"key": "max_length",
									"value": "{{max_length}}"
								}
							]
						},
						"description": "returns a random cat fact"
					},
					"response": []
				}
			],
			"description": "Folder for fact"
		},
		{
			"name": "facts",
			"item": [
				{
					"name": "Get a list of cat facts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\",function(){\r",
									"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Data array has valid structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;\r",
									"    jsonData.data.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"fact\").that.is.a(\"string\").and.not.empty;\r",
									"        pm.expect(item).to.have.property(\"length\").that.is.a(\"number\");\r",
									"        pm.expect(item.length).to.equal(item.fact.length);\r",
									"    });\r",
									"});\r",
									"pm.test(\"Links array is structured correctly\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const links = jsonData.links;\r",
									"    pm.expect(links).to.be.an(\"array\").that.is.not.empty;\r",
									"    links.forEach(link => {\r",
									"        pm.expect(link).to.have.property(\"url\");\r",
									"        pm.expect(link).to.have.property(\"label\");\r",
									"        pm.expect(link).to.have.property(\"active\").that.is.a(\"boolean\");\r",
									"    });\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    type: \"object\",\r",
									"    required: [\r",
									"        \"current_page\",\r",
									"        \"data\",\r",
									"        \"first_page_url\",\r",
									"        \"from\",\r",
									"        \"last_page\",\r",
									"        \"last_page_url\",\r",
									"        \"links\",\r",
									"        \"next_page_url\",\r",
									"        \"path\",\r",
									"        \"per_page\",\r",
									"        \"prev_page_url\",\r",
									"        \"to\",\r",
									"        \"total\"\r",
									"    ],\r",
									"    properties: {\r",
									"        current_page: { type: \"integer\" },\r",
									"        data: {\r",
									"            type: \"array\",\r",
									"            items: {\r",
									"                type: \"object\",\r",
									"                required: [\"fact\", \"length\"],\r",
									"                properties: {\r",
									"                    fact: { type: \"string\" },\r",
									"                    length: { type: \"integer\" }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        first_page_url: { type: \"string\", format: \"uri\" },\r",
									"        from: { type: \"integer\" },\r",
									"        last_page: { type: \"integer\" },\r",
									"        last_page_url: { type: \"string\", format: \"uri\" },\r",
									"        links: {\r",
									"            type: \"array\",\r",
									"            items: {\r",
									"                type: \"object\",\r",
									"                required: [\"url\", \"label\", \"active\"],\r",
									"                properties: {\r",
									"                    url: { type: [\"string\", \"null\"], format: \"uri\" },\r",
									"                    label: { type: \"string\" },\r",
									"                    active: { type: \"boolean\" }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        next_page_url: { type: [\"string\", \"null\"], format: \"uri\" },\r",
									"        path: { type: \"string\", format: \"uri\" },\r",
									"        per_page: { type: \"integer\" },\r",
									"        prev_page_url: { type: [\"string\", \"null\"], format: \"uri\" },\r",
									"        to: { type: \"integer\" },\r",
									"        total: { type: \"integer\" }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Response matches schema\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/facts?limit=1&max_length={{max_length}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"facts"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "max_length",
									"value": "{{max_length}}"
								}
							]
						},
						"description": "Get a list of cat facts"
					},
					"response": []
				}
			],
			"description": "Folder for facts"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "max_length",
			"value": "140",
			"type": "string"
		},
		{
			"key": "url",
			"value": "",
			"type": "string"
		}
	]
}